<%- include('../../views/partials/header') %>

 <!-- Main Content --> 
 <div class="cart-heading"><h3>Order Summary</h3></div>  
 <div class="cart-container">
    <!-- Sidebar -->
    
    <section class="profile-section">
        <h2> Addresses</h2>
        <div class="saved-addresses">
          <h5>Saved Addresses</h5>
          <!-- <form action="/placeOrder" method="post" id="select-address-form"> -->
            <div class="address-list" id="address-list">
              <% userAddress.address.forEach((address, index) => { %>
              <div class="address-card">
                <div>
                  <input 
                    type="radio" 
                    name="selectedAddress" 
                    id="address<%= index %>" 
                    value="<%= address._id %>" 
                    <%= index === 0 ? 'checked' : '' %>>
                  <label for="address<%= index %>">
                    <p>
                      <strong><%= address.name %></strong><br>
                      <%= address.phone %>, <%= address.street %>, <%= address.city %>,<br>
                      <%= address.state %>,<%= address.pinCode %>
                    </p>
                  </label>
                </div>
                <div>
                  <!-- <a href="/editAddress/<%= address._id %>">
                    <i class="fa-regular fa-pen-to-square"></i>
                  </a> -->
                </div>
              </div>
              <% }) %>
            </div>
            <!-- <button type="submit" id="save-address-btn" class="address-btn">Save & Continue</button> -->
          <!-- </form> -->
        </div>
        
         <button class="address-btn " id="add-address-btn"> <span>  Add New Address</span></button>
         <!-- <button type="submit" id="save-address-btn" style="background-color: rgb(251, 155, 71);" class="address-btn">view order-summary</button> -->
        <div class="address-form hidden" id="address-form">
            <form id="new-address-form" class="profile-form" action="/saveAddress" method="post">
                <div class="form-group">
                  <label for="name">Name</label>
                  <input type="text" id="name" name="name"  placeholder="Enter Name" >
                  <small class="error-message"></small>
                </div>
                <div class="form-group">
                    <label for="phone">phone</label>
                    <input type="text" id="phone" name="phone"  placeholder="Enter Phone Number" >
                    <small class="error-message"></small>
                  </div>
                <div class="form-group">
                  <label for="street">Address and street</label>
                  <input type="text" id="street"name="street"  placeholder="Enter Address and street" >
                  <small class="error-message"></small>
                </div>
                <div class="form-group">
                  <label for="city">City</label>
                  <input type="text" id="city" name="city"  placeholder="Enter Your city" >
                  <small class="error-message"></small>
                </div>
                <div class="form-group">
                    <label for="state">State</label>
                    <input type="text" id="state" name="state"  placeholder="Enter Your state" >
                    <small class="error-message"></small>
                  </div>
                  <div class="form-group">
                    <label for="pin-code">PinCode</label>
                    <input type="text" id="pin" name="pinCode"  placeholder="Enter Your pincode" >
                    <small class="error-message"></small>
                  </div>
                <div class="form-actions">
                  <button type="submit" class="save-btn ">Save Address</button>
                </div>
             
          </form>
        </div>


        <div class="cart-list hidden">
          <h4>Order Overview</h4>
          <table>
            <thead>
              <tr>
                <th>Image</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Color</th>
                <th>Quantity</th>
                <th>Subtotal</th>
              </tr>
            </thead>
            <tbody>
              <% cartData.items.forEach((item) => { %>
                <div class="cart-products" data-product-id="<%= item.productId._id %>" data-product-quantity="<%= item.quantity %>">
              <tr>
                <td><img src="/uploads/<%= item.productId.images[0] %>" alt="Product Image" class="cart-image"></td>
                <td><%= item.productId.productName %></td>
                <td>₹<%= item.productId.salePrice %></td>
                <td><%= item.productId.color %></td>
                <td id="product-quantity"><%= item.quantity %></td>
                <td>₹<%= item.quantity * item.productId.salePrice %></td>
              </tr>
            </div>
              <% }) %>
            </tbody>
          </table>
        </div>
        
    </section>

    <div class="order-summary">
      <h2>Price Details</h2>
      <hr>
      <p>Price: <strong id="totalAmount">₹<%= totalprice %>.00</strong></p>
      <p>Discount: <strong id="discountAmount" style="color: rgb(241, 59, 59);"> 0</strong></p>
      <p>Delivery Charges: <strong style="text-decoration: line-through;"></strong> 
        <strong style="color: green;">Free</strong>
      </p>
      <hr>
      <p style="font-size: 1.2em;">Total Amount: <strong id="finalAmount"> ₹<%= totalprice %>.00</strong></p>
    
      <!-- Apply Coupon Section -->
      <div class="coupon-section-plceorder">
        <div class="alert alert-info hidden" role="alert">
          A simple info alert—check it out!
        </div>
        <!-- <label for="couponCode">Apply Coupon:</label> -->
        <input type="text" id="couponCode" placeholder="Enter Coupon Code">
        <button id="applyCoupon" class="applyCoupon-btn">Apply</button>
        <button id="removeCoupon" class="removeCoupon-btn" disabled>remove</button>
      </div>
    
      <!-- Payment Method Section -->
      <div class="payment-methods">
        <h3>Select Payment Method:</h3>
        <div>
          <input type="radio" id="cod" name="paymentMethod" value="COD" checked>
          <label for="cod">Cash on Delivery</label>
        </div>
        <div>
          <input type="radio" id="online" name="paymentMethod" value="Online">
          <label for="online">Online Payment</label>
        </div>
      </div>
    
      <button class="checkout-btn">Place Order</button>
    </div>
    
 </div>
 <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script>
        document.addEventListener('DOMContentLoaded', () => {
  const addAddressBtn = document.getElementById('add-address-btn');
  const addressForm = document.getElementById('address-form');
  const newAddressForm = document.getElementById('new-address-form');
  const addressList = document.getElementById('address-list');

  // Toggle address form visibility
  addAddressBtn.addEventListener('click', () => {
    addressForm.classList.toggle('hidden');
  });

  newAddressForm.addEventListener('submit', (e) => {
      let isValid = true;

      // Clear previous error messages
    document.querySelectorAll('.error').forEach(error => error.remove());

      // Validate Name
      const name = document.getElementById('name');
      if (name.value.trim() === '') {
        isValid = false;
        showError(name, 'Name is required.');
      }

      // Validate Phone
      const phone = document.getElementById('phone');
      if (!/^\d{10}$/.test(phone.value.trim())) {
        isValid = false;
        showError(phone, 'Enter a valid 10-digit phone number.');
      }

      // Validate Address and Street
      const street = document.getElementById('street');
      if (street.value.trim() === '') {
        isValid = false;
        showError(street, 'Address and street are required.');
      }

      // Validate City
      const city = document.getElementById('city');
      if (city.value.trim() === '') {
        isValid = false;
        showError(city, 'City is required.');
      }

      // Validate State
      const state = document.getElementById('state');
      if (state.value.trim() === '') {
        isValid = false;
        showError(state, 'State is required.');
      }

      // Validate PinCode
      const pin = document.getElementById('pin');
      if (!/^\d{6}$/.test(pin.value.trim())) {
        isValid = false;
        showError(pin, 'Enter a valid 6-digit pin code.');
      }

      if (!isValid) {
        e.preventDefault(); // Prevent form submission if validation fails
      }
    });

    function showError(input, message) {
      const error = document.createElement('small');
      error.className = 'error';
      error.style.color = 'red';
      error.textContent = message;
      input.parentElement.appendChild(error);
    }

    //display cart-list 
//     document.getElementById('save-address-btn').addEventListener('click', () => {
//   const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
//   if (!selectedAddress) {
//     alert("Please select an address to continue.");
//     return;
//   }
//   document.querySelector('.cart-list').classList.remove('hidden');
// });

//coupon
    const applyCouponButton = document.getElementById('applyCoupon');
    const couponCodeInput = document.getElementById('couponCode');
    const finalAmountElement = document.getElementById('finalAmount');
    const totalAmountElement = document.getElementById('totalAmount');
    const discountAmountElement = document.getElementById('discountAmount');
    const removeCoupon = document.getElementById('removeCoupon')
    let couponDiscount;

 applyCouponButton.addEventListener('click', async () => {
  const couponCode = couponCodeInput.value.trim();
  const totalPrice = parseFloat(totalAmountElement.textContent.replace("₹", ""));
  const discountAmount = parseFloat(discountAmountElement.textContent.replace("₹", ""));
// alert(discountAmount)
     
  if (!couponCode) {
    Swal.fire('Error', 'Please enter a valid coupon code.', 'error');

    return;
  }

  try {
    const response = await fetch('/couponsValidate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode, totalAmount: totalPrice }),
    });

    if (!response.ok) {
      const { message } = await response.json();
      Swal.fire('Error', message, 'error');
      return;
    }

    const { message, couponDiscountAmount } = await response.json();

    // Update the UI with the discount
    couponDiscount = couponDiscountAmount;
    //  discountAmount = discountAmount+couponDiscount;
    // console.log("discount",discountAmount);
    // alert(discountAmount)
    const finalAmount = totalPrice - couponDiscount;
    discountAmountElement.textContent = `${couponDiscount}.00`;
    finalAmountElement.textContent = `₹${finalAmount}.00`;
    removeCoupon.disabled =false;
    removeCoupon.classList.add("active");

    Swal.fire('Success', message, 'success');
  } catch (error) {
    console.error('Error validating coupon:', error);
    Swal.fire('Error', 'An unexpected error occurred. Please try again.', 'error');
  }
});

removeCoupon.addEventListener('click', async () => {
  const finalPrice = parseFloat(finalAmountElement.textContent.replace("₹", ""));
  const discountAmount = parseFloat(discountAmountElement.textContent.replace("₹", ""));
  const couponDiscount = parseFloat(discountAmount); // Ensure this value is derived correctly

  // Calculate the new amounts
  // alert(couponDiscount)
  const finalAmount = finalPrice + couponDiscount;
  const newDiscountAmount = discountAmount - couponDiscount;

  // Update UI elements
  discountAmountElement.textContent = `₹${newDiscountAmount.toFixed(2)}`;
  finalAmountElement.textContent = `₹${finalAmount.toFixed(2)}`;
  couponCodeInput.value = ""; // Clear the coupon input value
  removeCoupon.disabled = true; // Disable the remove button
  removeCoupon.classList.add("disable");


  // Show success alert
  Swal.fire({
    icon: 'success',
    title: 'Coupon Removed',
    text: 'Your coupon has been removed successfully!',
    confirmButtonText: 'OK',
  });
});
document.querySelector('.checkout-btn').addEventListener('click', async () => {
  const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked')?.value;
  const finalAmount = document.getElementById('finalAmount').textContent.replace("₹", "").trim();
  const discountAmount = document.getElementById('discountAmount').textContent.replace("₹", "").trim();
  const couponCode =  document.getElementById('couponCode').value.trim();
  const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
  if (!paymentMethod) {
    alert("Please select a payment method.");
    return;
  }
  const cartProducts = [];
  const cartDetails = document.querySelectorAll(".cart-products");

  cartDetails.forEach((detail) => {
    const quantity = detail.getAttribute("data-product-quantity");
    const productId = detail.getAttribute("data-product-id"); // Add data-product-id attribute in HTML

    cartProducts.push({
      productId: productId, // Use product ID or cart item ID
      quantity: parseInt(quantity),
    });
  });
  // const cartProducts = JSON.parse(localStorage.getItem('cartProducts')) || []; // Assuming cart is stored in local storage

  // Prepare the order data
  const orderData = {
    selectedAddress,
    finalAmount,
    discountAmount,
    couponCode,
    cartProducts,
    paymentMethod,
  };
  if(paymentMethod === "COD"){
    try {
      // Send POST request to the server
      const response = await fetch('/placeOrder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData),
      });
      
      if (response.ok) {
            Swal.fire({
              icon: 'success',
              title: 'Order Placed',
              text: 'Your order has been placed successfully!',
              confirmButtonText: 'OK',
            }).then(() => {
              window.location.href = '/orderSuccess'; // Redirect to success page
            });
          } else {
            const errorMessage = await response.text();
            Swal.fire({
              icon: 'error',
              title: 'Order Failed',
              text: `Error placing order: ${errorMessage}`,
            });
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            icon: 'error',
            title: 'Unexpected Error',
            text: 'An unexpected error occurred while placing the order.',
          });
        }
      }else{
        const response = await fetch('/placeOrder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderData),
      }); 
         const order = await response.json();
        // alert(order.id)
        // Initialize Razorpay payment form
        const options = {
          key: 'rzp_test_4MBYamMKeUifHI', // Replace with your Razorpay Key ID
          amount: order.amount,
          currency: order.currency,
          name: 'MyShop',
          description: 'Wish List Checkout',
          order_id: order.id,
          handler: async function (response) {
            // alert(order.id)
            // Verify the payment on the server

            const verifyResponse = await fetch(`/verify-payment?orderId=${order. receipt}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(response),
            });

            const verify = await verifyResponse.json();

            if (verify.message === 'Payment verified successfully') {
              Swal.fire({
              icon: 'success',
              title: 'Order Placed',
              text: 'Your order has been placed successfully!',
              confirmButtonText: 'OK',
            }).then(() => {
              window.location.href = '/orderSuccess'; // Redirect to success page
            });
            } else {
              alert('Payment Verification Failed!');
            }
          },
          //   const verificationResponse = await fetch('/verify-payment', {
          //     method: 'POST',
          //     headers: {
          //       'Content-Type': 'application/json',
          //     },
          //     body: JSON.stringify(response),
          //   });
          //   const verificationData = await verificationResponse.json();
          //   console.log("verifydata ,",verificationData)
          //   if (verificationData.ok) {
          //     Swal.fire({
          //     icon: 'success',
          //     title: 'Order Placed',
          //     text: 'Your order has been placed successfully!',
          //     confirmButtonText: 'OK',
          //   }).then(() => {
          //     window.location.href = '/orderSuccess'; // Redirect to success page
          //   });
          //   } else {
          //     alert('Payment Verification Failed');
          //   }
          // },
         " prefill": {
            "name": 'John Doe',
           " email": 'john.doe@example.com',
            "contact": '7012398079',
          },
          "theme": {
            color: '#F37254',
          },
        };
        // alert("success")
        const rzp = new Razorpay(options); 
        rzp.open();
       
       rzp.on('payment.failed', function (response) {
            Swal.fire('Error', `Payment failed: ${response.error.description}`, 'error');
        });
        
      }
      
      });
  });
        </script>
      </body>
      </html>