<%- include('../../views/partials/adminheader') %>
<div class="side">
    <aside>
        <ul>
            <li><a href="/admin/dashboard">Dashboard</a></li>
            <li class="active"><a href="/admin/Products">Products</a> </li>
            <li><a href="/admin/Users">Users</a></li>
            <li><a href="#">Coupons</a></li>
            <li><a href="#">Order</a></li>
            <li><a href="/admin/Offers">Offers</a></li>
            <li><a href="/admin/category">Category</a></li>
            <li class="sign-out">Sales report</li>
           
        </ul>
    </aside>
    <main>
        <!-- Header Navigation Bar -->
         <h2>Add Product</h2>
         <section class="new-form-productaddsection">
            <form  method="post" action="/admin/add-product" enctype="multipart/form-data" id="productform"  class="category-form">
                <% if (typeof message!== 'undefined') { %>
                    <p class="text-center m-auto" style="color:red;font-size:16px;"><%= message%></p>
                <% } %> 
                <div class="row">
               <div  class="card mx-1 text-start">
                
                    <label for="product_name" class="form-label">Product Name</label>
                    <input type="text" placeholder="Type here" name="name"
                        class="form-control border" id="name">
                    <div class="error danger-msg" id="name-error"></div>
                

               
                    <label class="form-label">Full description</label>
                    <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                        rows="2"></textarea>
                    <div class="error danger-msg" id="description-error"></div>
                

                    
                        

                            <label class="form-label"> Price</label>
                        <input placeholder="" name="price" type="text"
                            class="form-control border" id="price">
                            <div class="error danger-msg" id="price-error"></div>
                    
                                <label class="form-label">Quantity</label>
                                <input placeholder="" name="quantity" id="quantity" type="text" class="form-control border">
                                <div class="error danger-msg" id="quantity-error"></div>

                                <label class="form-label">Rating</label>
                                <input placeholder="" name="rating" id="rating" type="text" class="form-control border">
                                <div class="error danger-msg" id="rating"></div>

                                <label class="form-label">Color</label>
                                <input  name="color" id="color" type="text" class="form-control border">
                            <div class="error danger-msg" id="color-error"></div>

                        <label class="form-label">Category</label>
                        <select class="form-select border" style="width: 150px;" name="category">
                            
                            <%for(let i=0;i<cat.length;i++){%>
                                <option value="<%=cat[i].name%>">
                                    <%=cat[i].name%>
                                </option>
                            <%}%>  
                                                                                
                        </select>
                        <div id="category-error" class="error-message"></div>
                        
               </div>        

                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose images</h4>
                            </div>
                            
                                            <br> <div id="fileInput">
                                                <!-- <input class="form-control" type="file" name="image" id="fileInput1"accept="image/png, image/jpeg, image/jpg"> -->
                                                            <input type="file" name="image" id="fileInput1"   >
        
                                                            <input type="file" name="image" id="fileInput2"   >                                           
                                                          
                                                            <input type="file" name="image" id="fileInput3"  ><br><br>
                                                        </div>
                                                    
                                                            <div id="previewContainer" class="preview"></div><br>
                       
                                                    </div>
                </div>
                
                <div class="form-buttons">
                    <button type="submit" class="submit-button" id="frm-btn">Submit</button>
                </div>
            </form>
        </section>
   </main>
</div>



<script>

function validateAndSubmit(){
        if(validateForm){
            document.forms[0].submit();    
            }
    }

    let cropper;
    const croppedImages = [];
    const maxImages = 3;
    const previewContainer = document.getElementById("previewContainer");

    document.getElementById("fileInput").addEventListener("change", function (event) {
        const files = event.target.files;
        if (files.length + croppedImages.length > maxImages) {
            alert("You can only upload up to " + maxImages + " images.");
            return;
        }
        for (const file of files) {
            previewImage(file);
        }
    });

    function previewImage(file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const imageContainer = document.createElement("div");
            imageContainer.style.position = "relative";
            imageContainer.style.display = "inline-block";
            imageContainer.style.margin = "5px";

            const img = document.createElement("img");
            img.src = e.target.result;
            img.classList.add("preview-img");
            img.style.maxWidth = "100px";
            img.style.display = "block";

            const deleteButton = document.createElement("button");
            deleteButton.innerText = "X";
            deleteButton.style.position = "absolute";
            deleteButton.style.top = "0";
            deleteButton.style.right = "0";
            deleteButton.style.background = "red";
            deleteButton.style.color = "white";
            deleteButton.style.border = "none";
            deleteButton.style.cursor = "pointer";

            deleteButton.onclick = function () {
                const index = croppedImages.indexOf(img.src);
                if (index > -1) {
                    croppedImages.splice(index, 1);
                }
                imageContainer.remove();
            };

            imageContainer.appendChild(img);
            imageContainer.appendChild(deleteButton);
            previewContainer.appendChild(imageContainer);

            img.onclick = function () {
                openCropper(e.target.result, img);
            };

            croppedImages.push(e.target.result); // Store base64 image data
        };
        reader.readAsDataURL(file);
    }

    function openCropper(imageSrc, imgElement) {
        const image = document.createElement("img");
        image.src = imageSrc;
        image.style.width = "100%";

        const modal = document.createElement("div");
        modal.style.position = "fixed";
        modal.style.top = "0";
        modal.style.left = "0";
        modal.style.width = "100%";
        modal.style.height = "100%";
        modal.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
        modal.style.display = "flex";
        modal.style.justifyContent = "center";
        modal.style.alignItems = "center";
        modal.appendChild(image);

        document.body.appendChild(modal);

        cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 1,
            scalable: false,
        });

        const cropButton = document.createElement("button");
        cropButton.innerText = "Crop & Save";
        cropButton.style.position = "absolute";
        cropButton.style.bottom = "20px";
        cropButton.style.padding = "10px 20px";
        cropButton.onclick = function () {
            const croppedCanvas = cropper.getCroppedCanvas();
            imgElement.src = croppedCanvas.toDataURL(); // Update original image preview
            cropper.destroy();
            modal.remove();
        };
        modal.appendChild(cropButton);
    }

     // Function to handle form submission with validation
     document.getElementById("productform").addEventListener("submit", function (event) {
        event.preventDefault(); // Prevent form submission until validation is done

        // Clear any previous error messages
        clearErrors();

        // Validate form fields
        let isValid = true;

        // Validate each form field
        const name = document.getElementById('name');
        const description = document.getElementById('descriptionid');
        const price = document.getElementById('price');
        const quantity = document.getElementById('quantity');
        const color = document.getElementById('color');

        if (!validateName(name.value)) {
            showError('name-error', 'Please enter a valid product name.');
            isValid = false;
        }

        if (!description.value.trim()) {
            showError('description-error', 'Please enter a product description.');
            isValid = false;
        }

        if (!price.value.trim() || isNaN(price.value)) {
            showError('price-error', 'Price must be a valid number.');
            isValid = false;
        }

        if (!quantity.value.trim() || isNaN(quantity.value) || parseInt(quantity.value) <= 0) {
            showError('quantity-error', 'Quantity must be a valid positive number.');
            isValid = false;
        }

        if (!color.value.trim()) {
            showError('color-error', 'Please specify a color.');
            isValid = false;
        }

        // If all validations pass, submit the form
        if (isValid) {
            this.submit(); // Submit the form if validation is successful
        } else {
            document.getElementById('formError').textContent = 'Please correct the errors above.';
        }
        const formData = new FormData(this);
        croppedImages.forEach((imageData, index) => {
            formData.append(`images[${index}]`, imageData);
        });
    });

    // Function to show error messages
    function showError(id, message) {
        const errorElement = document.getElementById(id);
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    // Function to clear all error messages
    function clearErrors() {
        const errorElements = document.querySelectorAll('.error');
        errorElements.forEach(error => {
            error.style.display = 'none';
        });
    }

    // Name validation function
    function validateName(name) {
        const nameRegex = /^[A-Za-z\s]+$/; // Only allows letters and spaces
        return nameRegex.test(name);
    }

    // Price validation function
    function validatePrice(price) {
        return !isNaN(price) && parseFloat(price) > 0;
    }

    // Quantity validation function
    function validateQuantity(quantity) {
        return !isNaN(quantity) && parseInt(quantity) > 0;
    }

    // Color validation function
    function validateColor(color) {
        return color.trim().length > 0;
    }

    // Email validation function (if you need it later)
    function validateEmail(email) {
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        return emailRegex.test(email);
    }








</script>
<%- include('../../views/partials/adminfooter') %>